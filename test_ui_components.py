#!/usr/bin/env python3
"""UI Components Verification Test"""
import sys
import os

# Suppress Qt warnings in headless mode
os.environ['QT_QPA_PLATFORM'] = 'offscreen'

def test_ui_components():
    """Test that all UI components can be imported and instantiated"""
    print("=" * 70)
    print("UI Components Verification Test")
    print("=" * 70)
    print()
    
    try:
        from PyQt5.QtWidgets import QApplication
        from PyQt5.QtCore import Qt
        
        app = QApplication(sys.argv)
        app.setLayoutDirection(Qt.RightToLeft)
        
        print("1. Testing core imports...")
        from src.models import init_database, get_session, User
        from src.controllers import AuthController
        print("   âœ“ Models and controllers imported")
        
        print("\n2. Testing UI widget imports...")
        from src.ui import LoginDialog, MainWindow
        from src.ui.dashboard_widget import DashboardWidget
        from src.ui.policy_widget import PolicyWidget
        from src.ui.installment_widget import InstallmentWidget
        from src.ui.calendar_widget import CalendarWidget
        from src.ui.reports_widget import ReportsWidget
        from src.ui.sms_widget import SMSWidget
        from src.ui.persian_date_edit import PersianDateEdit
        from src.ui.sms_settings_dialog import SMSSettingsDialog
        from src.ui.policy_installment_management import PolicyInstallmentDialog
        print("   âœ“ All UI widgets imported successfully")
        
        print("\n3. Testing database and user setup...")
        init_database()
        session = get_session()
        
        user = session.query(User).filter_by(username='admin').first()
        if not user:
            auth_ctrl = AuthController(session)
            success, msg, user = auth_ctrl.register_user(
                'admin', 'admin123', 'Ù…Ø¯ÛŒØ± Ø³ÛŒØ³ØªÙ…', 
                'admin@test.com', '09123456789', 'admin'
            )
            if not success:
                print(f"   âœ— Failed to create user: {msg}")
                return False
        
        print(f"   âœ“ User ready: {user.full_name}")
        
        print("\n4. Testing widget instantiation...")
        
        # Test Dashboard
        try:
            dashboard = DashboardWidget(user, session)
            print("   âœ“ DashboardWidget created")
        except Exception as e:
            print(f"   âœ— DashboardWidget failed: {e}")
            return False
        
        # Test Policy Widget
        try:
            policy_widget = PolicyWidget(user, session)
            print("   âœ“ PolicyWidget created")
        except Exception as e:
            print(f"   âœ— PolicyWidget failed: {e}")
            return False
        
        # Test Installment Widget
        try:
            installment_widget = InstallmentWidget(user, session)
            print("   âœ“ InstallmentWidget created")
        except Exception as e:
            print(f"   âœ— InstallmentWidget failed: {e}")
            return False
        
        # Test Calendar Widget
        try:
            calendar_widget = CalendarWidget(user, session)
            print("   âœ“ CalendarWidget created")
        except Exception as e:
            print(f"   âœ— CalendarWidget failed: {e}")
            return False
        
        # Test Reports Widget
        try:
            reports_widget = ReportsWidget(user, session)
            print("   âœ“ ReportsWidget created")
        except Exception as e:
            print(f"   âœ— ReportsWidget failed: {e}")
            return False
        
        # Test SMS Widget
        try:
            sms_widget = SMSWidget(user, session)
            print("   âœ“ SMSWidget created")
        except Exception as e:
            print(f"   âœ— SMSWidget failed: {e}")
            return False
        
        # Test Persian Date Edit
        try:
            from PyQt5.QtCore import QDate
            date_edit = PersianDateEdit()
            date_edit.setDate(QDate.currentDate())
            print("   âœ“ PersianDateEdit created")
        except Exception as e:
            print(f"   âœ— PersianDateEdit failed: {e}")
            return False
        
        print("\n5. Testing utility functions...")
        from src.utils import (
            PersianDateConverter, format_currency, format_persian_number,
            ReportGenerator, SMSManager, NotificationManager, get_config
        )
        
        # Test Persian date conversion
        from datetime import datetime
        today = datetime.now()
        persian_date = PersianDateConverter.gregorian_to_jalali(today)
        print(f"   âœ“ Date conversion: {today.date()} â†’ {persian_date}")
        
        # Test currency formatting
        amount = 1234567
        formatted = format_currency(amount)
        print(f"   âœ“ Currency format: {amount} â†’ {formatted}")
        
        # Test config
        config = get_config()
        sms_config = config.get_sms_config()
        print(f"   âœ“ Config loaded: SMS enabled = {sms_config.get('enabled')}")
        
        # Test report generator
        report_gen = ReportGenerator(session)
        print("   âœ“ ReportGenerator created")
        
        # Test SMS manager
        sms_mgr = SMSManager()
        print(f"   âœ“ SMSManager created: enabled = {sms_mgr.enabled}")
        
        print("\n6. Testing main window...")
        try:
            # Don't show the window, just create it
            main_window = MainWindow(user, session)
            print("   âœ“ MainWindow created successfully")
            print(f"     - Window title: {main_window.windowTitle()}")
            print(f"     - Number of tabs: {main_window.tabs.count()}")
            
            # Verify all tabs are present
            expected_tabs = [
                "ðŸ“Š Ø¯Ø§Ø´Ø¨ÙˆØ±Ø¯",
                "ðŸ“‹ Ø¨ÛŒÙ…Ù‡â€ŒÙ†Ø§Ù…Ù‡â€ŒÙ‡Ø§", 
                "ðŸ’° Ø§Ù‚Ø³Ø§Ø·",
                "ðŸ“… ØªÙ‚ÙˆÛŒÙ… Ø§Ù‚Ø³Ø§Ø·",
                "ðŸ“ˆ Ú¯Ø²Ø§Ø±Ø´â€ŒÙ‡Ø§",
                "ðŸ“± Ù¾ÛŒØ§Ù…Ú©â€ŒÙ‡Ø§"
            ]
            
            actual_tabs = []
            for i in range(main_window.tabs.count()):
                actual_tabs.append(main_window.tabs.tabText(i))
            
            if actual_tabs == expected_tabs:
                print("   âœ“ All tabs present and correctly named")
            else:
                print(f"   ! Tab mismatch:")
                print(f"     Expected: {expected_tabs}")
                print(f"     Actual: {actual_tabs}")
            
        except Exception as e:
            print(f"   âœ— MainWindow failed: {e}")
            import traceback
            traceback.print_exc()
            return False
        
        session.close()
        
        print("\n" + "=" * 70)
        print("âœ“ All UI components verified successfully!")
        print("=" * 70)
        print()
        print("UI Components Ready:")
        print("  âœ“ All widgets can be imported")
        print("  âœ“ All widgets can be instantiated")
        print("  âœ“ Persian calendar support working")
        print("  âœ“ Persian number formatting working")
        print("  âœ“ Configuration system working")
        print("  âœ“ Main window with all tabs working")
        print()
        print("The application is ready to run with GUI!")
        print("Use: python main.py")
        print()
        
        return True
        
    except Exception as e:
        print(f"\nâœ— Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    success = test_ui_components()
    sys.exit(0 if success else 1)
